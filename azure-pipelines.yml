# Azure Pipelines configuration for a .NET project

# Trigger pipeline on commits to the master branch
trigger:
  branches:
    include:
      - master

# Use a Windows agent (can be changed to ubuntu-latest if needed)
pool:
  vmImage: 'windows-latest'

# Define variables
variables:
  solution: '**/*.sln' # Target the solution file
  testProjects: '**/*Tests/*.csproj' # Target test projects
  buildConfiguration: 'Release'
  dotnetVersion: '8.0.x'

steps:
# Install .NET SDK
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '$(dotnetVersion)'
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Restore NuGet packages for the solution
- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '$(solution)'
    feedsToUse: 'select'

# Build the solution
- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --no-restore'

# Run tests with code coverage
- task: DotNetCoreCLI@2
  displayName: 'Run tests'
  inputs:
    command: 'test'
    projects: '$(testProjects)'
    arguments: '--configuration $(buildConfiguration) --no-build --no-restore --collect:"XPlat Code Coverage" --settings coverlet.runsettings'
  condition: succeeded() # Only run if previous steps succeed

# Publish build output
- task: DotNetCoreCLI@2
  displayName: 'Publish projects'
  inputs:
    command: 'publish'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration) --no-restore --output $(Build.ArtifactStagingDirectory)'
  condition: succeeded()

# Publish artifacts to Azure Pipelines
- task: PublishBuildArtifacts@1
  displayName: 'Publish build artifacts'
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'drop'
    publishLocation: 'Container'
  condition: succeeded()